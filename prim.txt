#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_SIZE 100

// Function to find the vertex with minimum key value
int findMinKey(int key[], int mstSet[], int n) {
  int min = INT_MAX, min_index;

  for (int v = 0; v < n; v++) {
    if (mstSet[v] == 0 && key[v] < min) {
      min = key[v];
      min_index = v;
    }
  }

  return min_index;
}

// Function to print the Minimum Spanning Tree
void printMST(int parent[], int graph[MAX_SIZE][MAX_SIZE], int n) {
  printf("Edge \tWeight\n");
  for (int i = 1; i < n; i++) {
    printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
  }
}

// Function to construct and print the Minimum Spanning Tree using Prim's algorithm
void primMST(int graph[MAX_SIZE][MAX_SIZE], int n) {
  int parent[MAX_SIZE]; // Array to store constructed MST
  int key[MAX_SIZE];    // Key values used to pick minimum weight edge in cut
  int mstSet[MAX_SIZE]; // Array to track vertices included in MST

  // Initialize all keys as INFINITE and mstSet[] as 0
  for (int i = 0; i < n; i++) {
    key[i] = INT_MAX;
    mstSet[i] = 0;
  }

  // Always include the first vertex in MST
  key[0] = 0;
  parent[0] = -1;

  // Construct MST with (n-1) vertices
  for (int count = 0; count < n - 1; count++) {
    int u = findMinKey(key, mstSet, n);

    mstSet[u] = 1; // Add the picked vertex to the MST set

    // Update key value and parent index of the adjacent vertices of the picked vertex.
    // Consider only those vertices that are not yet included in the MST.
    for (int v = 0; v < n; v++) {
      if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v]) {
        parent[v] = u;
        key[v] = graph[u][v];
      }
    }
  }

  // Print the constructed MST
  printMST(parent, graph, n);
}

int main() {
  int n;
  printf("Enter the number of vertices: ");
  scanf("%d", &n);

  int graph[MAX_SIZE][MAX_SIZE];

  printf("Enter the adjacency matrix:\n");
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      scanf("%d", &graph[i][j]);
    }
  }

  printf("Minimum Spanning Tree using Prim's algorithm:\n");
  primMST(graph, n);

  return 0;
}
